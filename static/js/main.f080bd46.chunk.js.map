{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","console","log","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OACA,CACIC,KAAM,sBACNC,SAAU,OAEdC,OACA,CACIF,KAAM,qBACNC,SAAU,eA4BHE,EAfO,SAAAC,GAClB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUiB,IAAIE,MAAQC,YATrC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAILK,EAEDZ,EAAaS,GAA/BP,EAFmBU,EAEnBV,KAAMC,EAFaS,EAEbT,SAId,OAFAU,QAAQC,IAAIR,EAAMC,KAGdQ,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBV,IAC9BM,EAAAC,EAAAC,cAAA,KAAGC,UAAS,aAAAC,OAAehB,EAAf,mBACZY,EAAAC,EAAAC,cAAA,UAAKf,GACLa,EAAAC,EAAAC,cAAA,KAAGC,UAAS,cAAAC,OAAgBhB,EAAhB,qBCjClBiB,EAAU,SAAAd,GACZ,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVZ,EAAMe,WAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCXTG,6MACFC,MAAQ,CAACjB,IAAK,KAAMkB,aAAc,uFAEb,IAAAC,EAAAC,KACjBC,UAAUC,YAAYC,mBAClB,SAAAC,GAAaL,EAAKM,SAAS,CAACzB,IAAKwB,EAASE,OAAOC,YACjD,SAAAC,GAAQT,EAAKM,SAAS,CAACP,aAAcU,EAAId,oDAK7C,OAAIM,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMjB,IAChCQ,EAAAC,EAAAC,cAAA,oBAAYU,KAAKH,MAAMC,eAE7BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMjB,IAChCQ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACmB,EAAD,CAAe7B,IAAKoB,KAAKH,MAAMjB,OAExCQ,EAAAC,EAAAC,cAACoB,EAAD,CAAShB,QAAQ,oEAIxB,OAAON,EAAAC,EAAAC,cAAA,WAAMU,KAAKW,wBArBRC,IAAMC,WAyBxBC,IAASC,OACL3B,EAAAC,EAAAC,cAAC0B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.f080bd46.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig = {\r\n    summer:\r\n    {\r\n        text: 'Let\\'s hit the beach',\r\n        iconName: 'sun'\r\n    },\r\n    winter:\r\n    {\r\n        text: 'Burr, it is chilly',\r\n        iconName: 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 3 && month < 9) {\r\n        return lat > 0 ? 'summer' : 'winter';\r\n    }\r\n    else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    };\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n    const season = getSeason(props.lat, (new Date()).getMonth());\r\n    const { text, iconName} = seasonConfig[season];\r\n\r\n    console.log(props.lat);\r\n\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`icon-left ${iconName} massive icon`} />\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right ${iconName} massive icon`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component {\r\n    state = {lat: null, errorMessage: ''};\r\n\r\n    componentDidMount () {\r\n        navigator.geolocation.getCurrentPosition(\r\n            position => {this.setState({lat: position.coords.latitude})},\r\n            err => {this.setState({errorMessage: err.message})}\r\n        );\r\n    }\r\n\r\n    renderContent () {\r\n        if (this.state.errorMessage && !this.state.lat) {\r\n            return <div>Error:{this.state.errorMessage}</div>;\r\n        }\r\n        if (!this.state.errorMessage && this.state.lat) {\r\n            return <div><SeasonDisplay lat={this.state.lat} /></div>;\r\n        }\r\n        return <Spinner message=\"Please accept location request\" />;\r\n    }\r\n\r\n    render () {\r\n        return <div>{this.renderContent()}</div>;\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}